generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  email                    String         @unique
  password                 String?
  role                     Role?
  created_at               DateTime       @default(now())
  updated_at               DateTime       @updatedAt
  isvarified               Boolean        @default(false)
  name                     String?
  oauthId                  String?
  gender                   String?
  id                       String         @id @default(cuid())
  avatar                   String?
  phoneNumber              String?
  ResetPasswordToken       String?
  VerificationToken        String?
  ResetPasswordTokenExpiry DateTime?
  VerificationTokenExpiry  DateTime?
  admin                    Admin?
  attendances              Attendance[]
  hod                      Hod?
  leaveRequests            LeaveRequest[]
  notifications            Notification[]
  student                  Student?
  teacher                  Teacher?
}

model Student {
  id               String        @id @default(cuid())
  course_id        String
  created_at       DateTime      @default(now())
  updated_at       DateTime      @updatedAt
  institute_id     String
  CurrentSemester  String?
  CurrentYear      String?
  address          String?
  dateOfBirth      DateTime
  enrollmentNumber String
  firstName        String
  lastName         String
  rollNumber       String?
  status           StudentStatus
  avatar           String?       @db.VarChar(255)
  marks            Mark[]
  course           Course        @relation(fields: [course_id], references: [id])
  user             User          @relation(fields: [id], references: [id])
  institute        Institute     @relation(fields: [institute_id], references: [id])
  ClassRoom        ClassRoom[]   @relation("ClassRoomStudents")
  Department       Department[]  @relation("StudentDepartments")

  @@unique([enrollmentNumber, institute_id])
}

model Teacher {
  id                    String       @id @default(cuid())
  subjects_teaching     Json
  created_at            DateTime     @default(now())
  updated_at            DateTime     @updatedAt
  institute_id          String
  employementStartDate  String
  experience            String
  firstName             String
  lastName              String
  qualification         String
  role                  TeacherRole
  subjectSpecialization String
  dateOfBirth           DateTime
  ClassRoom             ClassRoom?
  Hod                   Hod?
  user                  User         @relation(fields: [id], references: [id])
  institute             Institute    @relation(fields: [institute_id], references: [id])
  timetables            Timetable[]
  Department            Department[] @relation("TeacherDepartments")
}

model Hod {
  id            String     @id @default(cuid())
  department_id String     @unique
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
  institute_id  String
  teacher_id    String     @unique
  department    Department @relation(fields: [department_id], references: [id])
  user          User       @relation(fields: [id], references: [id])
  institute     Institute  @relation(fields: [institute_id], references: [id])
  Teacher       Teacher    @relation(fields: [teacher_id], references: [id])
}

model Admin {
  id           String      @id @default(cuid())
  access_level AccessLevel
  created_at   DateTime    @default(now())
  updated_at   DateTime    @updatedAt
  institute_id String
  user         User        @relation(fields: [id], references: [id])
  institute    Institute   @relation(fields: [institute_id], references: [id])
}

model Institute {
  id                 String       @id @default(cuid())
  created_at         DateTime     @default(now())
  updated_at         DateTime     @updatedAt
  contactNumber      String
  businessName       String
  businessaddress    String?
  email              String
  registrationNumber String       @unique
  admins             Admin[]
  ClassRoom          ClassRoom[]
  departments        Department[]
  hods               Hod[]
  students           Student[]
  teachers           Teacher[]
}

model Department {
  id               String       @id @default(cuid())
  institute_id     String
  name             String
  created_at       DateTime     @default(now())
  updated_at       DateTime     @updatedAt
  code             String
  description      String?
  parent_id        String?
  ClassRoom        ClassRoom[]
  Course           Course[]
  institute        Institute    @relation(fields: [institute_id], references: [id])
  Department       Department?  @relation("DepartmentToDepartment", fields: [parent_id], references: [id])
  other_Department Department[] @relation("DepartmentToDepartment")
  hods             Hod?
  Student          Student[]    @relation("StudentDepartments")
  Teacher          Teacher[]    @relation("TeacherDepartments")

  @@unique([institute_id, code])
}

model Course {
  id            String      @id @default(cuid())
  name          String
  description   String?
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt
  department_id String
  courseCode    String
  ClassRoom     ClassRoom[]
  Department    Department  @relation(fields: [department_id], references: [id])
  students      Student[]
  subjects      Subject[]

  @@unique([courseCode, department_id])
}

model Subject {
  id          String       @id @default(cuid())
  name        String
  course_id   String
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
  attendances Attendance[]
  marks       Mark[]
  course      Course       @relation(fields: [course_id], references: [id])
  timetables  Timetable[]
}

model Attendance {
  id         String           @id @default(cuid())
  user_id    String
  subject_id String
  date       DateTime
  status     AttendanceStatus
  remarks    String?
  created_at DateTime         @default(now())
  updated_at DateTime         @updatedAt
  subject    Subject          @relation(fields: [subject_id], references: [id])
  user       User             @relation(fields: [user_id], references: [id])
}

model Mark {
  id             String   @id @default(cuid())
  student_id     String
  subject_id     String
  marks_obtained Float
  total_marks    Float
  exam_date      DateTime
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  student        Student  @relation(fields: [student_id], references: [id])
  subject        Subject  @relation(fields: [subject_id], references: [id])
}

model LeaveRequest {
  id         String      @id @default(cuid())
  user_id    String
  start_date DateTime
  end_date   DateTime
  reason     String?
  status     LeaveStatus @default(pending)
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  user       User        @relation(fields: [user_id], references: [id])
}

model Timetable {
  id          String    @id @default(cuid())
  subject_id  String
  teacher_id  String
  day_of_week DayOfWeek
  start_time  DateTime
  end_time    DateTime
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  subject     Subject   @relation(fields: [subject_id], references: [id])
  teacher     Teacher   @relation(fields: [teacher_id], references: [id])
}

model Notification {
  id          String   @id @default(cuid())
  user_id     String?
  title       String
  message     String
  read_status Boolean  @default(false)
  created_at  DateTime @default(now())
  user        User?    @relation(fields: [user_id], references: [id])
}

model ClassRoom {
  id            String      @id @default(cuid())
  name          String
  department_id String
  institute_id  String
  course_id     String
  teacher_id    String     @unique
  created_at    DateTime   @default(now())
  year          String?
  Course        Course     @relation(fields: [course_id], references: [id])
  Department    Department @relation(fields: [department_id], references: [id])
  Institute     Institute  @relation(fields: [institute_id], references: [id])
  Teacher       Teacher    @relation(fields: [teacher_id], references: [id])
  Student       Student[]  @relation("ClassRoomStudents")
}

enum Role {
  student
  teacher
  admin
}

enum AccessLevel {
  superadmin
  admin
}

enum AttendanceStatus {
  present
  absent
  late
  excused
}

enum LeaveStatus {
  pending
  approved
  rejected
}

enum DayOfWeek {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday
}

enum StudentStatus {
  Active
  Graduated
  Dropped_Out
}

enum TeacherRole {
  Lecturer
  AssistantProfessor
  Professor
  HOD
}
