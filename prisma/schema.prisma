generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum Role {
  student
  teacher
  hod
  admin
}

enum AccessLevel {
  superadmin
  admin
}

enum AttendanceStatus {
  present
  absent
  late
  excused
}

enum LeaveStatus {
  pending
  approved
  rejected
}

enum DayOfWeek {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday
}

// Models
model User {
  id             String        @id @default(cuid()) 
  email          String        @unique
  password       String?
  name           String?
  isvarified     Boolean? 
  role           Role?
  profile_id     Int?
  oauthId        String?
  gender         String?
  phoneNumber    String?
  avatar         String?
  // Relations
  student        Student?
  teacher        Teacher?
  hod            Hod?
  admin          Admin?
  attendances    Attendance[]
  leaveRequests  LeaveRequest[]
  notifications  Notification[]

  created_at     DateTime   @default(now())
  updated_at     DateTime   @updatedAt
}

model Student {
  id             String        @id @default(cuid())
  user           User          @relation(fields: [id], references: [id])
  batch          Batch         @relation(fields: [batch_id], references: [id])
  batch_id       String
  department     Department    @relation(fields: [department_id], references: [id])
  department_id  String
  course         Course        @relation(fields: [course_id], references: [id])
  course_id      String
  enrollment_year Int
  marks          Mark[]
  institute      Institute     @relation(fields: [institute_id], references: [id]) // Institute reference
  institute_id   String
  created_at     DateTime      @default(now())
  updated_at     DateTime      @updatedAt
}

model Teacher {
  id             String        @id @default(cuid())
  user           User          @relation(fields: [id], references: [id])
  department     Department    @relation(fields: [department_id], references: [id])
  department_id  String
  institute      Institute     @relation(fields: [institute_id], references: [id]) // Institute reference
  institute_id   String
  timetables     Timetable[]
  subjects_teaching Json
  
  created_at     DateTime      @default(now())
  updated_at     DateTime      @updatedAt
}

model Hod {
  id             String        @id @default(cuid())
  user           User          @relation(fields: [id], references: [id])
  department     Department    @relation(fields: [department_id], references: [id])
  department_id  String
  institute      Institute     @relation(fields: [institute_id], references: [id]) // Institute reference
  institute_id   String
  created_at     DateTime      @default(now())
  updated_at     DateTime      @updatedAt
}

model Admin {
  id             String        @id @default(cuid())
  user           User          @relation(fields: [id], references: [id])
  access_level   AccessLevel
  institute      Institute     @relation(fields: [institute_id], references: [id]) // Institute reference
  institute_id   String
  created_at     DateTime      @default(now())
  updated_at     DateTime      @updatedAt
}

model Institute {
  id             String        @id @default(cuid())
  registrationNumber      String           @unique
  businessName            String
  businessaddress         String?
  contactNumber           String        
  email                   String
  departments             Department[]
  students                Student[]
  teachers                Teacher[]
  hods                    Hod[]
  admins                  Admin[]

  created_at     DateTime      @default(now())
  updated_at     DateTime      @updatedAt
}


model Department {
  id             String        @id @default(cuid())
  institute      Institute     @relation(fields: [institute_id], references: [id])
  institute_id   String
  name           String
  students       Student[]
  teachers       Teacher[]
  hods           Hod[]

  created_at     DateTime      @default(now())
  updated_at     DateTime      @updatedAt
}

model Batch {
  id             String        @id @default(cuid())
  name           String
  start_year     Int
  end_year       Int
  course         Course        @relation(fields: [course_id], references: [id])
  course_id      String
  students       Student[]
  timetables     Timetable[]
  
  created_at     DateTime      @default(now())
  updated_at     DateTime      @updatedAt
}

model Course {
  id             String        @id @default(cuid())
  name           String
  description    String?
  batches        Batch[]
  subjects       Subject[]
  students       Student[]
  
  created_at     DateTime      @default(now())
  updated_at     DateTime      @updatedAt
}

model Subject {
  id             String        @id @default(cuid())
  name           String
  course         Course        @relation(fields: [course_id], references: [id])
  course_id      String
  attendances    Attendance[]
  marks          Mark[]
  timetables     Timetable[]
  
  created_at     DateTime      @default(now())
  updated_at     DateTime      @updatedAt
}

model Attendance {
  id             String        @id @default(cuid())
  user           User          @relation(fields: [user_id], references: [id])
  user_id        String
  subject        Subject       @relation(fields: [subject_id], references: [id])
  subject_id     String
  date           DateTime
  status         AttendanceStatus
  remarks        String?
  
  created_at     DateTime      @default(now())
  updated_at     DateTime      @updatedAt
}

model Mark {
  id             String        @id @default(cuid())
  student        Student       @relation(fields: [student_id], references: [id])
  student_id     String
  subject        Subject       @relation(fields: [subject_id], references: [id])
  subject_id     String
  marks_obtained Float
  total_marks    Float
  exam_date      DateTime
  
  created_at     DateTime      @default(now())
  updated_at     DateTime      @updatedAt
}

model LeaveRequest {
  id             String        @id @default(cuid())
  user           User          @relation(fields: [user_id], references: [id])
  user_id        String
  start_date     DateTime
  end_date       DateTime
  reason         String?
  status         LeaveStatus   @default(pending)
  
  created_at     DateTime      @default(now())
  updated_at     DateTime      @updatedAt
}

model Timetable {
  id             String        @id @default(cuid())
  batch          Batch         @relation(fields: [batch_id], references: [id])
  batch_id       String
  subject        Subject       @relation(fields: [subject_id], references: [id])
  subject_id     String
  teacher        Teacher       @relation(fields: [teacher_id], references: [id])
  teacher_id     String
  day_of_week    DayOfWeek
  start_time     DateTime
  end_time       DateTime
  
  created_at     DateTime      @default(now())
  updated_at     DateTime      @updatedAt
}

model Notification {
  id             String        @id @default(cuid())
  user           User?         @relation(fields: [user_id], references: [id])
  user_id        String?
  title          String
  message        String
  read_status    Boolean       @default(false)
  
  created_at     DateTime      @default(now())
}
